{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8574927,"sourceType":"datasetVersion","datasetId":5127485}],"dockerImageVersionId":30715,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-01T04:11:58.402847Z","iopub.execute_input":"2024-06-01T04:11:58.404276Z","iopub.status.idle":"2024-06-01T04:11:59.570315Z","shell.execute_reply.started":"2024-06-01T04:11:58.404227Z","shell.execute_reply":"2024-06-01T04:11:59.568888Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"#kaggle competitions download -c kagglex-cohort4","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:14:36.260288Z","iopub.execute_input":"2024-06-01T04:14:36.260702Z","iopub.status.idle":"2024-06-01T04:14:36.265446Z","shell.execute_reply.started":"2024-06-01T04:14:36.260673Z","shell.execute_reply":"2024-06-01T04:14:36.264443Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.impute import SimpleImputer\nimport numpy as np","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:38:56.698580Z","iopub.execute_input":"2024-06-01T04:38:56.699332Z","iopub.status.idle":"2024-06-01T04:38:56.704980Z","shell.execute_reply.started":"2024-06-01T04:38:56.699289Z","shell.execute_reply":"2024-06-01T04:38:56.704004Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"# Load the training dataset\ntrain = pd.read_csv('/kaggle/input/used-car-price-prediction-dataset/train.csv')","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:39:05.716823Z","iopub.execute_input":"2024-06-01T04:39:05.717865Z","iopub.status.idle":"2024-06-01T04:39:05.951667Z","shell.execute_reply.started":"2024-06-01T04:39:05.717829Z","shell.execute_reply":"2024-06-01T04:39:05.950298Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"train.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:39:18.552143Z","iopub.execute_input":"2024-06-01T04:39:18.552569Z","iopub.status.idle":"2024-06-01T04:39:18.570295Z","shell.execute_reply.started":"2024-06-01T04:39:18.552534Z","shell.execute_reply":"2024-06-01T04:39:18.568835Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"   id    brand          model  model_year  milage fuel_type  \\\n0   0     Ford   F-150 Lariat        2018   74349  Gasoline   \n1   1      BMW          335 i        2007   80000  Gasoline   \n2   2   Jaguar      XF Luxury        2009   91491  Gasoline   \n3   3      BMW   X7 xDrive40i        2022    2437    Hybrid   \n4   4  Pontiac  Firebird Base        2001  111000  Gasoline   \n\n                                              engine  \\\n0      375.0HP 3.5L V6 Cylinder Engine Gasoline Fuel   \n1  300.0HP 3.0L Straight 6 Cylinder Engine Gasoli...   \n2       300.0HP 4.2L 8 Cylinder Engine Gasoline Fuel   \n3  335.0HP 3.0L Straight 6 Cylinder Engine Gasoli...   \n4      200.0HP 3.8L V6 Cylinder Engine Gasoline Fuel   \n\n                     transmission ext_col int_col       accident clean_title  \\\n0                    10-Speed A/T    Blue    Gray  None reported         Yes   \n1                     6-Speed M/T   Black   Black  None reported         Yes   \n2                     6-Speed A/T  Purple   Beige  None reported         Yes   \n3  Transmission w/Dual Shift Mode    Gray   Brown  None reported         Yes   \n4                             A/T   White   Black  None reported         Yes   \n\n   price  \n0  11000  \n1   8250  \n2  15000  \n3  63500  \n4   7850  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>brand</th>\n      <th>model</th>\n      <th>model_year</th>\n      <th>milage</th>\n      <th>fuel_type</th>\n      <th>engine</th>\n      <th>transmission</th>\n      <th>ext_col</th>\n      <th>int_col</th>\n      <th>accident</th>\n      <th>clean_title</th>\n      <th>price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>Ford</td>\n      <td>F-150 Lariat</td>\n      <td>2018</td>\n      <td>74349</td>\n      <td>Gasoline</td>\n      <td>375.0HP 3.5L V6 Cylinder Engine Gasoline Fuel</td>\n      <td>10-Speed A/T</td>\n      <td>Blue</td>\n      <td>Gray</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>11000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>BMW</td>\n      <td>335 i</td>\n      <td>2007</td>\n      <td>80000</td>\n      <td>Gasoline</td>\n      <td>300.0HP 3.0L Straight 6 Cylinder Engine Gasoli...</td>\n      <td>6-Speed M/T</td>\n      <td>Black</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>8250</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>Jaguar</td>\n      <td>XF Luxury</td>\n      <td>2009</td>\n      <td>91491</td>\n      <td>Gasoline</td>\n      <td>300.0HP 4.2L 8 Cylinder Engine Gasoline Fuel</td>\n      <td>6-Speed A/T</td>\n      <td>Purple</td>\n      <td>Beige</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>15000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>BMW</td>\n      <td>X7 xDrive40i</td>\n      <td>2022</td>\n      <td>2437</td>\n      <td>Hybrid</td>\n      <td>335.0HP 3.0L Straight 6 Cylinder Engine Gasoli...</td>\n      <td>Transmission w/Dual Shift Mode</td>\n      <td>Gray</td>\n      <td>Brown</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>63500</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>Pontiac</td>\n      <td>Firebird Base</td>\n      <td>2001</td>\n      <td>111000</td>\n      <td>Gasoline</td>\n      <td>200.0HP 3.8L V6 Cylinder Engine Gasoline Fuel</td>\n      <td>A/T</td>\n      <td>White</td>\n      <td>Black</td>\n      <td>None reported</td>\n      <td>Yes</td>\n      <td>7850</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train.info()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:39:26.553095Z","iopub.execute_input":"2024-06-01T04:39:26.553513Z","iopub.status.idle":"2024-06-01T04:39:26.619705Z","shell.execute_reply.started":"2024-06-01T04:39:26.553475Z","shell.execute_reply":"2024-06-01T04:39:26.618568Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 54273 entries, 0 to 54272\nData columns (total 13 columns):\n #   Column        Non-Null Count  Dtype \n---  ------        --------------  ----- \n 0   id            54273 non-null  int64 \n 1   brand         54273 non-null  object\n 2   model         54273 non-null  object\n 3   model_year    54273 non-null  int64 \n 4   milage        54273 non-null  int64 \n 5   fuel_type     54273 non-null  object\n 6   engine        54273 non-null  object\n 7   transmission  54273 non-null  object\n 8   ext_col       54273 non-null  object\n 9   int_col       54273 non-null  object\n 10  accident      54273 non-null  object\n 11  clean_title   54273 non-null  object\n 12  price         54273 non-null  int64 \ndtypes: int64(4), object(9)\nmemory usage: 5.4+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"train.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:39:43.005331Z","iopub.execute_input":"2024-06-01T04:39:43.005722Z","iopub.status.idle":"2024-06-01T04:39:43.069444Z","shell.execute_reply.started":"2024-06-01T04:39:43.005695Z","shell.execute_reply":"2024-06-01T04:39:43.068228Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"id              0\nbrand           0\nmodel           0\nmodel_year      0\nmilage          0\nfuel_type       0\nengine          0\ntransmission    0\next_col         0\nint_col         0\naccident        0\nclean_title     0\nprice           0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"# Preprocessing\ntrain['accident'] = train['accident'].apply(lambda x: 0 if x == 'None reported' else 1)\ntrain['clean_title'] = train['clean_title'].apply(lambda x: 1 if x == 'Yes' else 0)\ntrain['horsepower'] = train['engine'].str.extract('(\\d+\\.?\\d*)HP').astype(float)\ntrain = train.drop(columns=['engine'])\ncategorical_features = ['brand', 'model', 'fuel_type', 'transmission', 'ext_col', 'int_col']\ntrain = pd.get_dummies(train, columns=categorical_features, drop_first=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:40:27.852656Z","iopub.execute_input":"2024-06-01T04:40:27.853064Z","iopub.status.idle":"2024-06-01T04:40:28.273971Z","shell.execute_reply.started":"2024-06-01T04:40:27.853033Z","shell.execute_reply":"2024-06-01T04:40:28.272778Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"# Identify missing values\nmissing_values = train.isnull().sum()\nmissing_values = missing_values[missing_values > 0]\nprint(f'Missing values in the dataset:\\n{missing_values}')","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:40:40.303447Z","iopub.execute_input":"2024-06-01T04:40:40.303827Z","iopub.status.idle":"2024-06-01T04:40:40.426635Z","shell.execute_reply.started":"2024-06-01T04:40:40.303798Z","shell.execute_reply":"2024-06-01T04:40:40.425462Z"},"trusted":true},"execution_count":37,"outputs":[{"name":"stdout","text":"Missing values in the dataset:\nhorsepower    4057\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"# Splitting the data\nX = train.drop(columns=['id', 'price'])\ny = train['price']","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:40:58.677668Z","iopub.execute_input":"2024-06-01T04:40:58.678123Z","iopub.status.idle":"2024-06-01T04:40:58.729355Z","shell.execute_reply.started":"2024-06-01T04:40:58.678093Z","shell.execute_reply":"2024-06-01T04:40:58.728149Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"# Impute missing values for numeric features with the median\nnumeric_features = X.select_dtypes(include=[float, int]).columns\nnumeric_imputer = SimpleImputer(strategy='median')\nX[numeric_features] = numeric_imputer.fit_transform(X[numeric_features])","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:41:09.229467Z","iopub.execute_input":"2024-06-01T04:41:09.229861Z","iopub.status.idle":"2024-06-01T04:41:09.278304Z","shell.execute_reply.started":"2024-06-01T04:41:09.229831Z","shell.execute_reply":"2024-06-01T04:41:09.276868Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"# Verify no missing values remain\nprint(X.isnull().sum().sum())","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:41:17.964341Z","iopub.execute_input":"2024-06-01T04:41:17.964743Z","iopub.status.idle":"2024-06-01T04:41:18.084994Z","shell.execute_reply.started":"2024-06-01T04:41:17.964714Z","shell.execute_reply":"2024-06-01T04:41:18.083560Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"0\n","output_type":"stream"}]},{"cell_type":"code","source":"# Split the data into training and validation sets\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\nprint(f'Training set shape: {X_train.shape}')\nprint(f'Validation set shape: {X_val.shape}')\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:41:28.434045Z","iopub.execute_input":"2024-06-01T04:41:28.434508Z","iopub.status.idle":"2024-06-01T04:41:28.658545Z","shell.execute_reply.started":"2024-06-01T04:41:28.434470Z","shell.execute_reply":"2024-06-01T04:41:28.657375Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"Training set shape: (43418, 2316)\nValidation set shape: (10855, 2316)\n","output_type":"stream"}]},{"cell_type":"code","source":"# Initialize the models\nmodels = {\n    'Linear Regression': LinearRegression(),\n    'Random Forest': RandomForestRegressor(n_estimators=100, random_state=42),\n    'Gradient Boosting': GradientBoostingRegressor(n_estimators=100, random_state=42)\n}\n\n# Train the models and evaluate them\nresults = {}\n\nfor model_name, model in models.items():\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_val)\n    rmse = np.sqrt(mean_squared_error(y_val, y_pred))\n    results[model_name] = rmse\n    print(f'{model_name} RMSE: {rmse}')","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:41:47.349459Z","iopub.execute_input":"2024-06-01T04:41:47.349862Z","iopub.status.idle":"2024-06-01T04:54:27.777239Z","shell.execute_reply.started":"2024-06-01T04:41:47.349833Z","shell.execute_reply":"2024-06-01T04:54:27.775930Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"Linear Regression RMSE: 3770927.4420640534\nRandom Forest RMSE: 53544.362367527494\nGradient Boosting RMSE: 48771.60903469293\n","output_type":"stream"}]},{"cell_type":"code","source":"# Load the test dataset\ntest = pd.read_csv('/kaggle/input/used-car-price-prediction-dataset/test.csv')\n\n# Apply the same preprocessing steps to the test data\ntest['accident'] = test['accident'].apply(lambda x: 0 if x == 'None reported' else 1)\ntest['clean_title'] = test['clean_title'].apply(lambda x: 1 if x == 'Yes' else 0)\ntest['horsepower'] = test['engine'].str.extract('(\\d+\\.?\\d*)HP').astype(float)\ntest = test.drop(columns=['engine'])\ntest = pd.get_dummies(test, columns=categorical_features, drop_first=True)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:58:18.450003Z","iopub.execute_input":"2024-06-01T04:58:18.450838Z","iopub.status.idle":"2024-06-01T04:58:18.835829Z","shell.execute_reply.started":"2024-06-01T04:58:18.450790Z","shell.execute_reply":"2024-06-01T04:58:18.834628Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"code","source":"test.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:58:24.773947Z","iopub.execute_input":"2024-06-01T04:58:24.774390Z","iopub.status.idle":"2024-06-01T04:58:24.799476Z","shell.execute_reply.started":"2024-06-01T04:58:24.774354Z","shell.execute_reply":"2024-06-01T04:58:24.798294Z"},"trusted":true},"execution_count":49,"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"      id  model_year  milage  accident  clean_title  horsepower  brand_Alfa  \\\n0  54273        2014   73000         0            1       302.0       False   \n1  54274        2015  128032         0            1       275.0       False   \n2  54275        2015   51983         0            1       241.0       False   \n3  54276        2018   29500         1            1       518.0       False   \n4  54277        2020   90000         1            1       335.0       False   \n\n   brand_Aston  brand_Audi  brand_BMW  ...  int_col_Sport  int_col_Tan  \\\n0        False       False      False  ...          False        False   \n1        False       False      False  ...          False        False   \n2        False       False      False  ...          False        False   \n3        False       False      False  ...          False        False   \n4        False       False       True  ...          False        False   \n\n   int_col_Titan Black / Quarzit  int_col_Tupelo  int_col_Very Light Cashmere  \\\n0                          False           False                        False   \n1                          False           False                        False   \n2                          False           False                        False   \n3                          False           False                        False   \n4                          False           False                        False   \n\n   int_col_Walnut  int_col_White  int_col_White / Brown  int_col_Yellow  \\\n0           False          False                  False           False   \n1           False          False                  False           False   \n2           False           True                  False           False   \n3           False           True                  False           False   \n4           False          False                  False           False   \n\n   int_col_–  \n0      False  \n1      False  \n2      False  \n3      False  \n4      False  \n\n[5 rows x 2236 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>model_year</th>\n      <th>milage</th>\n      <th>accident</th>\n      <th>clean_title</th>\n      <th>horsepower</th>\n      <th>brand_Alfa</th>\n      <th>brand_Aston</th>\n      <th>brand_Audi</th>\n      <th>brand_BMW</th>\n      <th>...</th>\n      <th>int_col_Sport</th>\n      <th>int_col_Tan</th>\n      <th>int_col_Titan Black / Quarzit</th>\n      <th>int_col_Tupelo</th>\n      <th>int_col_Very Light Cashmere</th>\n      <th>int_col_Walnut</th>\n      <th>int_col_White</th>\n      <th>int_col_White / Brown</th>\n      <th>int_col_Yellow</th>\n      <th>int_col_–</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>54273</td>\n      <td>2014</td>\n      <td>73000</td>\n      <td>0</td>\n      <td>1</td>\n      <td>302.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>54274</td>\n      <td>2015</td>\n      <td>128032</td>\n      <td>0</td>\n      <td>1</td>\n      <td>275.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>54275</td>\n      <td>2015</td>\n      <td>51983</td>\n      <td>0</td>\n      <td>1</td>\n      <td>241.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>54276</td>\n      <td>2018</td>\n      <td>29500</td>\n      <td>1</td>\n      <td>1</td>\n      <td>518.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>54277</td>\n      <td>2020</td>\n      <td>90000</td>\n      <td>1</td>\n      <td>1</td>\n      <td>335.0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>...</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 2236 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_ids = test['id']","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:58:34.724373Z","iopub.execute_input":"2024-06-01T04:58:34.724769Z","iopub.status.idle":"2024-06-01T04:58:34.731158Z","shell.execute_reply.started":"2024-06-01T04:58:34.724739Z","shell.execute_reply":"2024-06-01T04:58:34.729834Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"test = test.reindex(columns=X_train.columns, fill_value=0)","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:59:07.752383Z","iopub.execute_input":"2024-06-01T04:59:07.752847Z","iopub.status.idle":"2024-06-01T04:59:07.797867Z","shell.execute_reply.started":"2024-06-01T04:59:07.752804Z","shell.execute_reply":"2024-06-01T04:59:07.796811Z"},"trusted":true},"execution_count":53,"outputs":[]},{"cell_type":"code","source":"test[numeric_features] = numeric_imputer.transform(test[numeric_features])","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:59:09.245771Z","iopub.execute_input":"2024-06-01T04:59:09.246484Z","iopub.status.idle":"2024-06-01T04:59:09.263255Z","shell.execute_reply.started":"2024-06-01T04:59:09.246450Z","shell.execute_reply":"2024-06-01T04:59:09.262004Z"},"trusted":true},"execution_count":54,"outputs":[]},{"cell_type":"code","source":"# Use the best performing model to make predictions\nbest_model = models[min(results, key=results.get)]\ntest_predictions = best_model.predict(test)","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:59:10.813606Z","iopub.execute_input":"2024-06-01T04:59:10.814007Z","iopub.status.idle":"2024-06-01T04:59:11.518133Z","shell.execute_reply.started":"2024-06-01T04:59:10.813978Z","shell.execute_reply":"2024-06-01T04:59:11.516990Z"},"trusted":true},"execution_count":55,"outputs":[]},{"cell_type":"code","source":"#Prepare the submission file\nsubmission = pd.DataFrame({'id': test_ids, 'price': test_predictions})\nsubmission.to_csv('submission.csv', index=False)\nprint('Submission file created.')\n","metadata":{"execution":{"iopub.status.busy":"2024-06-01T04:59:31.929109Z","iopub.execute_input":"2024-06-01T04:59:31.930444Z","iopub.status.idle":"2024-06-01T04:59:32.073820Z","shell.execute_reply.started":"2024-06-01T04:59:31.930395Z","shell.execute_reply":"2024-06-01T04:59:32.070006Z"},"trusted":true},"execution_count":57,"outputs":[{"name":"stdout","text":"Submission file created.\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}