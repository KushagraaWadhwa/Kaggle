{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":67079,"databundleVersionId":7452256,"sourceType":"competition"}],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-03-29T16:13:55.005095Z","iopub.execute_input":"2024-03-29T16:13:55.005734Z","iopub.status.idle":"2024-03-29T16:13:56.011528Z","shell.execute_reply.started":"2024-03-29T16:13:55.005699Z","shell.execute_reply":"2024-03-29T16:13:56.010362Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"****MILESTONE-1****","metadata":{}},{"cell_type":"markdown","source":"***EXPLORATORY DATA ANALYSIS***","metadata":{}},{"cell_type":"code","source":"train_data=pd.read_csv('/kaggle/input/recipe-for-rating-predict-food-ratings-using-ml/train.csv')\ntest_data=pd.read_csv('/kaggle/input/recipe-for-rating-predict-food-ratings-using-ml/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:13:56.013128Z","iopub.execute_input":"2024-03-29T16:13:56.013542Z","iopub.status.idle":"2024-03-29T16:13:56.226209Z","shell.execute_reply.started":"2024-03-29T16:13:56.013509Z","shell.execute_reply":"2024-03-29T16:13:56.225369Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Train Data Shape: \",train_data.shape)\nprint(\"Test Data Shape: \",test_data.shape)\ntrain_data","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:13:56.227258Z","iopub.execute_input":"2024-03-29T16:13:56.227734Z","iopub.status.idle":"2024-03-29T16:13:56.258305Z","shell.execute_reply.started":"2024-03-29T16:13:56.227707Z","shell.execute_reply":"2024-03-29T16:13:56.257386Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.info()","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:13:56.260271Z","iopub.execute_input":"2024-03-29T16:13:56.260657Z","iopub.status.idle":"2024-03-29T16:13:56.290968Z","shell.execute_reply.started":"2024-03-29T16:13:56.260631Z","shell.execute_reply":"2024-03-29T16:13:56.289763Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Checking the Datatype of each column in the dataset\ntrain_data.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:13:56.292110Z","iopub.execute_input":"2024-03-29T16:13:56.292550Z","iopub.status.idle":"2024-03-29T16:13:56.300885Z","shell.execute_reply.started":"2024-03-29T16:13:56.292518Z","shell.execute_reply":"2024-03-29T16:13:56.299810Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.describe().transpose()","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:13:56.302260Z","iopub.execute_input":"2024-03-29T16:13:56.302663Z","iopub.status.idle":"2024-03-29T16:13:56.348740Z","shell.execute_reply.started":"2024-03-29T16:13:56.302629Z","shell.execute_reply":"2024-03-29T16:13:56.347899Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Checking for null values\ntrain_data.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:13:56.350341Z","iopub.execute_input":"2024-03-29T16:13:56.350738Z","iopub.status.idle":"2024-03-29T16:13:56.366247Z","shell.execute_reply.started":"2024-03-29T16:13:56.350701Z","shell.execute_reply":"2024-03-29T16:13:56.365336Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**There are 2 null values present in the Recipe_Review column. We won't be removing these null rows as of now.**","metadata":{}},{"cell_type":"code","source":"#Checking the distribution of the ratings throughout the data\ntrain_data['Rating'].value_counts().sort_index()","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:13:56.367275Z","iopub.execute_input":"2024-03-29T16:13:56.367586Z","iopub.status.idle":"2024-03-29T16:13:56.379336Z","shell.execute_reply.started":"2024-03-29T16:13:56.367561Z","shell.execute_reply":"2024-03-29T16:13:56.377839Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"target_var = train_data.columns[-3:-2].values[0]\nprint(\"Target Variable is:\", target_var)\n\nfeatures= list(train_data.columns.values)\nfeatures.remove(target_var)\nprint(\"List of Features:\", features)\nprint(\"Total number of Features:\", len(features))","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:13:56.380842Z","iopub.execute_input":"2024-03-29T16:13:56.381167Z","iopub.status.idle":"2024-03-29T16:13:56.387067Z","shell.execute_reply.started":"2024-03-29T16:13:56.381140Z","shell.execute_reply":"2024-03-29T16:13:56.386228Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Insights from the Data Loading Process:-**\n* The data has 14 features and 1 target variable(Rating)\n* There are 5 Categorical Features and 10 Numerical Features ","metadata":{}},{"cell_type":"code","source":"# DummyClassifier for first submission in the competition\n# import pandas as pd\n# train_data = pd.get_dummies(train_data, columns=['RecipeName', 'UserName'])\n# print(train_data.head())","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:13:56.391587Z","iopub.execute_input":"2024-03-29T16:13:56.391854Z","iopub.status.idle":"2024-03-29T16:13:56.396214Z","shell.execute_reply.started":"2024-03-29T16:13:56.391832Z","shell.execute_reply":"2024-03-29T16:13:56.395181Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:13:56.397529Z","iopub.execute_input":"2024-03-29T16:13:56.397842Z","iopub.status.idle":"2024-03-29T16:13:57.869743Z","shell.execute_reply.started":"2024-03-29T16:13:56.397811Z","shell.execute_reply":"2024-03-29T16:13:57.868764Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_data.hist(figsize=(34,28))","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:13:57.871115Z","iopub.execute_input":"2024-03-29T16:13:57.871958Z","iopub.status.idle":"2024-03-29T16:14:00.986179Z","shell.execute_reply.started":"2024-03-29T16:13:57.871918Z","shell.execute_reply":"2024-03-29T16:14:00.985193Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"##SCATTER PLOT OF THE TARGET VARIABLE: RATING\nplt.figure(figsize=(10, 6))\nplt.scatter(range(len(train_data['Rating'])), train_data['Rating'], color='skyblue', edgecolor='black')\nplt.title('Rating distribution')\nplt.ylabel('Rating')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:00.987109Z","iopub.execute_input":"2024-03-29T16:14:00.987421Z","iopub.status.idle":"2024-03-29T16:14:01.325416Z","shell.execute_reply.started":"2024-03-29T16:14:00.987395Z","shell.execute_reply":"2024-03-29T16:14:01.324341Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"##CORRELATION MATRIX OF DATA WITH NUMERICAL FEATURES\nnumeric = train_data.select_dtypes(include=['float64', 'int64']).columns\ncorr_matrix = train_data[numeric].corr()\nplt.figure(figsize=(10,6))\nsns.heatmap(corr_matrix, annot= True)","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:01.326475Z","iopub.execute_input":"2024-03-29T16:14:01.326760Z","iopub.status.idle":"2024-03-29T16:14:01.978371Z","shell.execute_reply.started":"2024-03-29T16:14:01.326735Z","shell.execute_reply":"2024-03-29T16:14:01.977152Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#DROPPING THE IRRELEVANT COLUMNS\nimport pandas as pd\ncolumns_to_drop = ['CommentID', 'UserID', 'UserName','CreationTimestamp','RecipeName','BestScore']\ntrain_data.drop(columns=columns_to_drop, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:01.979842Z","iopub.execute_input":"2024-03-29T16:14:01.980228Z","iopub.status.idle":"2024-03-29T16:14:01.991108Z","shell.execute_reply.started":"2024-03-29T16:14:01.980194Z","shell.execute_reply":"2024-03-29T16:14:01.989762Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_extraction.text import ENGLISH_STOP_WORDS\nimport re\n\ndef preprocess_review(review):\n    if isinstance(review, str):\n        pattern = re.compile(r'[^\\w\\s]')\n        return re.sub(pattern, '', review.lower())\n    else:\n        return ''\n    \npreprocessed_reviews = [preprocess_review(review) for review in train_data['Recipe_Review']]\n\nstopwords = set(ENGLISH_STOP_WORDS)\npreprocessed_reviews = [' '.join([word for word in review.split() if word not in stopwords]) for review in preprocessed_reviews]\n\ntfidf_vectorizer = TfidfVectorizer()\ntfidf_matrix = tfidf_vectorizer.fit_transform(preprocessed_reviews)\ntfidf_df = pd.DataFrame(tfidf_matrix.toarray(), columns=tfidf_vectorizer.get_feature_names_out())\ntrain_data = pd.concat([train_data, tfidf_df], axis=1)\n\ntrain_data.drop(columns=['Recipe_Review'], inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:01.992155Z","iopub.execute_input":"2024-03-29T16:14:01.992489Z","iopub.status.idle":"2024-03-29T16:14:08.722944Z","shell.execute_reply.started":"2024-03-29T16:14:01.992460Z","shell.execute_reply":"2024-03-29T16:14:08.721850Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Viewing the tf_idf-vectorised columns\ntfidf_df","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:08.724531Z","iopub.execute_input":"2024-03-29T16:14:08.724985Z","iopub.status.idle":"2024-03-29T16:14:08.778928Z","shell.execute_reply.started":"2024-03-29T16:14:08.724934Z","shell.execute_reply":"2024-03-29T16:14:08.777631Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**The null values present in the [RecipeReview] Column have become not null by [tfidf vectorizer]. After various hit and trials it was observed a higher accuracy was obtained on not deleting the null values and then let them being vectorised.**","metadata":{}},{"cell_type":"markdown","source":"**Tried assigning weights to various columns according to their importance in predicting the [Rating] of a food item.**","metadata":{}},{"cell_type":"code","source":"# import pandas as pd\n# from sklearn.preprocessing import MinMaxScaler\n\n# weights = {\n#     'RecipeNumber': -0.5,  # Inverse relationship: higher RecipeNumber -> lower weight\n#     'ThumbsUpCount': 0.8,\n#     'ReplyCount': 0.5,\n#     'ThumbsDownCount': -0.3,  # Negative impact: more ThumbsDownCount -> lower weight\n#     'UserReputation': 0.6\n# }\n# scaler = MinMaxScaler()\n# normalized_columns = scaler.fit_transform(train_data[['RecipeNumber', 'ThumbsUpCount', 'ReplyCount', 'ThumbsDownCount', 'UserReputation']])\n\n# combined_feature = (normalized_columns[:, 0] * weights['RecipeNumber'] +\n#                     normalized_columns[:, 1] * weights['ThumbsUpCount'] +\n#                     normalized_columns[:, 2] * weights['ReplyCount'] +\n#                     normalized_columns[:, 3] * weights['ThumbsDownCount'] +\n#                     normalized_columns[:, 4] * weights['UserReputation'])\n\n# tfidf_df['CombinedFeature'] = combined_feature","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:08.780492Z","iopub.execute_input":"2024-03-29T16:14:08.780908Z","iopub.status.idle":"2024-03-29T16:14:08.797194Z","shell.execute_reply.started":"2024-03-29T16:14:08.780872Z","shell.execute_reply":"2024-03-29T16:14:08.795834Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Dropping the not-required columns.\ncolumns_to_drop = ['ID', 'RecipeNumber', 'RecipeCode', 'UserReputation', 'ReplyCount', 'ThumbsUpCount', 'ThumbsDownCount']\ntrain_data.drop(columns=columns_to_drop, inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:08.798676Z","iopub.execute_input":"2024-03-29T16:14:08.799171Z","iopub.status.idle":"2024-03-29T16:14:09.314596Z","shell.execute_reply.started":"2024-03-29T16:14:08.799140Z","shell.execute_reply":"2024-03-29T16:14:09.313361Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**PERFORMING THE PREPROCESSING OF THE TEST DATASET**","metadata":{}},{"cell_type":"code","source":"test_data=pd.read_csv('/kaggle/input/recipe-for-rating-predict-food-ratings-using-ml/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.316148Z","iopub.execute_input":"2024-03-29T16:14:09.316692Z","iopub.status.idle":"2024-03-29T16:14:09.356658Z","shell.execute_reply.started":"2024-03-29T16:14:09.316648Z","shell.execute_reply":"2024-03-29T16:14:09.355470Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_data.info()","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.358364Z","iopub.execute_input":"2024-03-29T16:14:09.358775Z","iopub.status.idle":"2024-03-29T16:14:09.372726Z","shell.execute_reply.started":"2024-03-29T16:14:09.358740Z","shell.execute_reply":"2024-03-29T16:14:09.371581Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_data.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.374177Z","iopub.execute_input":"2024-03-29T16:14:09.374537Z","iopub.status.idle":"2024-03-29T16:14:09.386226Z","shell.execute_reply.started":"2024-03-29T16:14:09.374505Z","shell.execute_reply":"2024-03-29T16:14:09.385401Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\ncolumns_to_drop = ['CommentID', 'UserID', 'UserName','CreationTimestamp','RecipeName','BestScore']\ntest_data.drop(columns=columns_to_drop, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.387668Z","iopub.execute_input":"2024-03-29T16:14:09.388539Z","iopub.status.idle":"2024-03-29T16:14:09.397401Z","shell.execute_reply.started":"2024-03-29T16:14:09.388511Z","shell.execute_reply":"2024-03-29T16:14:09.396536Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_extraction.text import ENGLISH_STOP_WORDS\nimport re\n\n\ndef preprocess_review(review):\n    if isinstance(review, str):      \n        pattern = re.compile(r'[^\\w\\s]')\n        return re.sub(pattern, '', review.lower())\n    else:\n        return ''\n\npreprocessed_reviews = [preprocess_review(review) for review in test_data['Recipe_Review']]\n\nstopwords = set(ENGLISH_STOP_WORDS)\npreprocessed_reviews = [' '.join([word for word in review.split() if word not in stopwords]) for review in preprocessed_reviews]\n\ntfidf_vectorizer = TfidfVectorizer()\ntfidf_matrix = tfidf_vectorizer.fit_transform(preprocessed_reviews)\n\ntfidf_df_test = pd.DataFrame(tfidf_matrix.toarray(), columns=tfidf_vectorizer.get_feature_names_out())\ntest_data = pd.concat([test_data, tfidf_df_test], axis=1)\n\ntest_data.drop(columns=['Recipe_Review'], inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.398681Z","iopub.execute_input":"2024-03-29T16:14:09.399233Z","iopub.status.idle":"2024-03-29T16:14:09.413679Z","shell.execute_reply.started":"2024-03-29T16:14:09.399203Z","shell.execute_reply":"2024-03-29T16:14:09.409209Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# import pandas as pd\n# from sklearn.preprocessing import MinMaxScaler\n\n# weights = {\n#     'RecipeNumber': -0.5,  # Inverse relationship: higher RecipeNumber -> lower weight\n#     'ThumbsUpCount': 0.8,\n#     'ReplyCount': 0.5,\n#     'ThumbsDownCount': -0.3,  # Negative impact: more ThumbsDownCount -> lower weight\n#     'UserReputation': 0.6\n# }\n# scaler = MinMaxScaler()\n# normalized_columns = scaler.fit_transform(test_data[['RecipeNumber', 'ThumbsUpCount', 'ReplyCount', 'ThumbsDownCount', 'UserReputation']])\n\n# combined_feature = (normalized_columns[:, 0] * weights['RecipeNumber'] +\n#                     normalized_columns[:, 1] * weights['ThumbsUpCount'] +\n#                     normalized_columns[:, 2] * weights['ReplyCount'] +\n#                     normalized_columns[:, 3] * weights['ThumbsDownCount'] +\n#                     normalized_columns[:, 4] * weights['UserReputation'])\n\n# tfidf_df_test['CombinedFeature'] = combined_feature","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.415095Z","iopub.status.idle":"2024-03-29T16:14:09.415772Z","shell.execute_reply.started":"2024-03-29T16:14:09.415562Z","shell.execute_reply":"2024-03-29T16:14:09.415583Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"columns_to_drop = ['RecipeNumber','RecipeCode', 'UserReputation', 'ReplyCount', 'ThumbsUpCount', 'ThumbsDownCount']\ntest_data.drop(columns=columns_to_drop, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.416878Z","iopub.status.idle":"2024-03-29T16:14:09.417278Z","shell.execute_reply.started":"2024-03-29T16:14:09.417098Z","shell.execute_reply":"2024-03-29T16:14:09.417114Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**MILESTONE-2**","metadata":{}},{"cell_type":"markdown","source":"**TRAINING THE MODELS**","metadata":{}},{"cell_type":"code","source":"Scores={}","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.418904Z","iopub.status.idle":"2024-03-29T16:14:09.419466Z","shell.execute_reply.started":"2024-03-29T16:14:09.419274Z","shell.execute_reply":"2024-03-29T16:14:09.419303Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# # Polynomial Regression(Ram Overload everytime)\n# from sklearn.pipeline import make_pipeline\n# from sklearn.preprocessing import PolynomialFeatures\n# from sklearn.linear_model import LogisticRegression\n\n# poly_model = make_pipeline(PolynomialFeatures(degree=2), LogisticRegression(max_iter=100))\n# poly_model.fit(X_train, y_train)\n# poly_accuracy = poly_model.score(X_test, y_test)\n# print(\"Polynomial Regression Accuracy:\", poly_accuracy)","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.420743Z","iopub.status.idle":"2024-03-29T16:14:09.421663Z","shell.execute_reply.started":"2024-03-29T16:14:09.421365Z","shell.execute_reply":"2024-03-29T16:14:09.421384Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_columns_not_in_test = set(tfidf_df.columns) - set(tfidf_df_test.columns)\ntfidf_df.drop(columns=train_columns_not_in_test, inplace=True)\ntest_columns_not_in_train = set(tfidf_df_test.columns) - set(tfidf_df.columns)\ntfidf_df_test.drop(columns=test_columns_not_in_train, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.422818Z","iopub.status.idle":"2024-03-29T16:14:09.423986Z","shell.execute_reply.started":"2024-03-29T16:14:09.423772Z","shell.execute_reply":"2024-03-29T16:14:09.423790Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX = tfidf_df  # Features\ny = train_data['Rating']  # Target variable\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\nprint(\"Shape of X_train:\", X_train.shape)\nprint(\"Shape of y_train:\", y_train.shape)\nprint(\"Shape of X_test:\", X_test.shape)\nprint(\"Shape of y_test:\", y_test.shape)\n","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.424727Z","iopub.status.idle":"2024-03-29T16:14:09.425061Z","shell.execute_reply.started":"2024-03-29T16:14:09.424891Z","shell.execute_reply":"2024-03-29T16:14:09.424905Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Scores={}","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.425985Z","iopub.status.idle":"2024-03-29T16:14:09.426325Z","shell.execute_reply.started":"2024-03-29T16:14:09.426144Z","shell.execute_reply":"2024-03-29T16:14:09.426157Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#LOGISTIC REGRESSION\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix\n\nlog_reg_model = LogisticRegression(max_iter=1000)\nlog_reg_model.fit(X_train, y_train)\ny_pred = log_reg_model.predict(X_test)\n\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy:\", accuracy)\nprecision = precision_score(y_test, y_pred, average='weighted')\nprint(\"Precision:\", precision)\nrecall = recall_score(y_test, y_pred, average='weighted')\nprint(\"Recall:\", recall)\nf1 = f1_score(y_test, y_pred, average='weighted')\nprint(\"F1 Score:\", f1)\n\nprint()\n#Confusion Matrix\nconf_matrix = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\\n\", conf_matrix)\n\nScores['LogisticRegression']=accuracy","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.428052Z","iopub.status.idle":"2024-03-29T16:14:09.428593Z","shell.execute_reply.started":"2024-03-29T16:14:09.428415Z","shell.execute_reply":"2024-03-29T16:14:09.428432Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Scatter plot for the validation set \n\nplt.scatter(range(len(y_pred)), y_pred, color='blue', label='Validation Predictions')\nplt.xlabel('Sample Index')\nplt.ylabel('Predicted Values')\nplt.title('Validation Predictions for Logistic Regression')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.429485Z","iopub.status.idle":"2024-03-29T16:14:09.429996Z","shell.execute_reply.started":"2024-03-29T16:14:09.429815Z","shell.execute_reply":"2024-03-29T16:14:09.429831Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\ncm = confusion_matrix(y_test, y_pred)\n\n# Plot confusion matrix\nplt.figure(figsize=(4, 2))\nsns.heatmap(cm, annot=True, cmap='Blues', fmt='g', cbar=False)\nplt.xlabel('Predicted labels')\nplt.ylabel('True labels')\nplt.title('Confusion Matrix')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.430951Z","iopub.status.idle":"2024-03-29T16:14:09.431514Z","shell.execute_reply.started":"2024-03-29T16:14:09.431328Z","shell.execute_reply":"2024-03-29T16:14:09.431345Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#LOGISTRIC REGRESSION WITH CROSS VALIDATION\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import KFold, cross_val_score\nimport numpy as np\n\nlgr = LogisticRegression(max_iter=1000)\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\ncv_scores = cross_val_score(lgr, X, y, cv=kf, scoring=\"accuracy\")\n\nprint(\"CV scores:\", cv_scores)\n\nmax_score_index = np.argmax(cv_scores)\nprint(\"Index of max score:\", max_score_index)\n\n# Get the fold indices for the maximum score\nfor fold_index, (train_index, test_index) in enumerate(kf.split(X)):\n    if fold_index == max_score_index:\n        X_train, X_test = X.to_numpy()[train_index], X.to_numpy()[test_index]\n        y_train, y_test = y[train_index], y[test_index]\n        break\n\nlgr.fit(X_train, y_train)\n\ntest_score = lgr.score(X_test, y_test)\nprint(\"Test score using the model trained on max score fold:\", test_score)\n\nScores['LogisticRegression(CV)']=test_score","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.432510Z","iopub.status.idle":"2024-03-29T16:14:09.433070Z","shell.execute_reply.started":"2024-03-29T16:14:09.432876Z","shell.execute_reply":"2024-03-29T16:14:09.432893Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Scatter plot for the validation set\nplt.scatter(range(len(y_pred)), y_pred, color='blue', label='Validation Predictions')\nplt.xlabel('Sample Index')\nplt.ylabel('Predicted Values')\nplt.title('Validation Predictions for LogisticRegression with cross validation')\nplt.legend()\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.433938Z","iopub.status.idle":"2024-03-29T16:14:09.434637Z","shell.execute_reply.started":"2024-03-29T16:14:09.434442Z","shell.execute_reply":"2024-03-29T16:14:09.434459Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Testing BASELINE MODEL(LOGISTIC REGRESSION WITH CROSS VALIDATION) \non TEST Dataset**","metadata":{}},{"cell_type":"code","source":"#SCORE-0.77012\n# y_pred_test = lgr.predict(tfidf_df_test)\n# test_predictions = pd.DataFrame({'ID': test_data['ID'], 'Rating': y_pred_test})\n# test_predictions['Rating'] = test_predictions['Rating'].astype(int)\n# ans=test_predictions['Rating']\n# test_predictions['ID'] = test_predictions.index + 1","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.435723Z","iopub.status.idle":"2024-03-29T16:14:09.436540Z","shell.execute_reply.started":"2024-03-29T16:14:09.436340Z","shell.execute_reply":"2024-03-29T16:14:09.436359Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#XGBoost Classifier\n\nimport xgboost as xgb\nfrom sklearn.metrics import mean_absolute_error\n\nxgb_model = xgb.XGBClassifier()\nxgb_model.fit(X_train, y_train)\nxgb_test_pred = xgb_model.predict(X_test)\n\nxgb_accuracy = accuracy_score(y_test, xgb_test_pred)\nxgb_error=mean_absolute_error(y_test,xgb_test_pred)\nprint(\"XGBoost Accuracy:\", xgb_accuracy)\nprint(\"XGBoost Error:\", xgb_error)\nprecision = precision_score(y_test, xgb_test_pred, average='weighted')\nprint(\"Precision:\", precision)\nrecall = recall_score(y_test, xgb_test_pred, average='weighted')\nprint(\"Recall:\", recall)\nf1 = f1_score(y_test, xgb_test_pred, average='weighted')\nprint(\"F1 Score:\", f1)\n\nprint()\n#Confusion Matrix\nconf_matrix = confusion_matrix(y_test, xgb_test_pred)\nprint(\"Confusion Matrix:\\n\", conf_matrix)\n\nScores['XGBoostClassifier']=xgb_accuracy\n","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.437620Z","iopub.status.idle":"2024-03-29T16:14:09.437953Z","shell.execute_reply.started":"2024-03-29T16:14:09.437786Z","shell.execute_reply":"2024-03-29T16:14:09.437799Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Scatter plot for the validation set\nplt.scatter(range(len(xgb_test_pred)), xgb_test_pred, color='blue', label='Validation Predictions')\nplt.xlabel('Sample Index')\nplt.ylabel('Predicted Values')\nplt.title('Validation Predictions for XGBClassifier')\nplt.legend()\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.438992Z","iopub.status.idle":"2024-03-29T16:14:09.439356Z","shell.execute_reply.started":"2024-03-29T16:14:09.439168Z","shell.execute_reply":"2024-03-29T16:14:09.439183Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#RandomForest\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix\n\nrfc = RandomForestClassifier(random_state=42)\nrfc.fit(X_train, y_train)\n\ny_pred = rfc.predict(X_test)\nrfc_accuracy= accuracy_score(y_test, y_pred)\nrfc_error= mean_absolute_error(y_test, y_pred)\nprint(\"RandomForest Accuracy:\",rfc_accuracy)\nprint(\"RandomForest Error\",rfc_error)\nprecision = precision_score(y_test, y_pred, average='weighted')\nprint(\"Precision:\", precision)\nrecall = recall_score(y_test, y_pred, average='weighted')\nprint(\"Recall:\", recall)\nf1 = f1_score(y_test, y_pred, average='weighted')\nprint(\"F1 Score:\", f1)\n\nprint()\n#Confusion Matrix\nconf_matrix = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\\n\", conf_matrix)\n\nScores['RandomForestClassifier']=rfc_accuracy","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.442575Z","iopub.status.idle":"2024-03-29T16:14:09.442939Z","shell.execute_reply.started":"2024-03-29T16:14:09.442758Z","shell.execute_reply":"2024-03-29T16:14:09.442774Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Scatter plot for the validation set\nimport matplotlib.pyplot as plt\nplt.scatter(range(len(y_pred)), y_pred, color='blue', label='Validation Predictions')\nplt.xlabel('Sample Index')\nplt.ylabel('Predicted Values')\nplt.title('Validation Predictions for RandomForestClassifier')\nplt.legend()\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.444722Z","iopub.status.idle":"2024-03-29T16:14:09.445089Z","shell.execute_reply.started":"2024-03-29T16:14:09.444906Z","shell.execute_reply":"2024-03-29T16:14:09.444928Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**HYPER-PARAMETER TUNING of RANDOMCLASSIFIER**","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = {\n    'n_estimators': [50, 100, 150],  \n    'max_depth': [None, 5, 10,15],       \n    'min_samples_split': [2, 5, 10],   \n    'min_samples_leaf': [1, 2, 4],\n    'bootstrap': [True, False]\n}\ngrid_search = GridSearchCV(estimator=RandomForestClassifier(),\n                           param_grid=param_grid,\n                           cv=5,  \n                           scoring='accuracy', \n                           n_jobs=-1)  \n\ngrid_search.fit(X_train, y_train)\n\nprint(\"Best Parameters:\", grid_search.best_params_)\n\nbest_model = grid_search.best_estimator_\n\ny_pred_best = best_model.predict(X_test)\nbest_accuracy = accuracy_score(y_test, y_pred_best)\nbest_error = mean_absolute_error(y_test, y_pred_best)\nprint(\"Best Model Accuracy:\", best_accuracy)\nprint(\"Best Model Error:\", best_error)\n\nScores['RandomForestClassifier(HT)']=best_accuracy","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.446348Z","iopub.status.idle":"2024-03-29T16:14:09.446683Z","shell.execute_reply.started":"2024-03-29T16:14:09.446524Z","shell.execute_reply":"2024-03-29T16:14:09.446538Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Testing BASELINE MODEL(RANDOM FOREST CLASSIFIER) \non TEST Dataset**","metadata":{}},{"cell_type":"code","source":"y_pred_test = best_model.predict(tfidf_df_test)\ntest_predictions = pd.DataFrame({'ID': test_data['ID'], 'Rating': y_pred_test})\ntest_predictions['Rating'] = test_predictions['Rating'].astype(int)\nans=test_predictions['Rating']\ntest_predictions['ID'] = test_predictions.index + 1","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.448674Z","iopub.status.idle":"2024-03-29T16:14:09.449111Z","shell.execute_reply.started":"2024-03-29T16:14:09.448880Z","shell.execute_reply":"2024-03-29T16:14:09.448899Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Scatter plot for the test dataset predictions\nplt.scatter(range(len(ans)), ans, color='red', label='Test Predictions')\nplt.xlabel('Sample Index')\nplt.ylabel('Predicted Values')\nplt.title('Test Predictions')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.450569Z","iopub.status.idle":"2024-03-29T16:14:09.451765Z","shell.execute_reply.started":"2024-03-29T16:14:09.451494Z","shell.execute_reply":"2024-03-29T16:14:09.451517Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_predictions.to_csv('submission.csv', index=False)\nprint(\"Submission file 'submission.csv' saved successfully.\")","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.455211Z","iopub.status.idle":"2024-03-29T16:14:09.455997Z","shell.execute_reply.started":"2024-03-29T16:14:09.455717Z","shell.execute_reply":"2024-03-29T16:14:09.455741Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"check=pd.read_csv('submission.csv')\ncheck['Rating'].value_counts().sort_index()","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.457319Z","iopub.status.idle":"2024-03-29T16:14:09.458071Z","shell.execute_reply.started":"2024-03-29T16:14:09.457794Z","shell.execute_reply":"2024-03-29T16:14:09.457817Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**MILESTONE-3**","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n\n#KNN model\nknn_model = KNeighborsClassifier(n_neighbors=5)  \nknn_model.fit(X_train, y_train)\ny_pred_knn = knn_model.predict(X_test)\naccuracy_knn = accuracy_score(y_test, y_pred_knn)\nprint(\"KNN Accuracy:\", accuracy_knn)\nprecision = precision_score(y_test, y_pred_knn, average='weighted')\nprint(\"Precision:\", precision)\nrecall = recall_score(y_test, y_pred_knn, average='weighted')\nprint(\"Recall:\", recall)\nf1 = f1_score(y_test, y_pred_knn, average='weighted')\nprint(\"F1 Score:\", f1)\nprint()\n#Confusion Matrix\nconf_matrix = confusion_matrix(y_test, y_pred_knn)\nprint(\"Confusion Matrix:\\n\", conf_matrix)\n\n#SVM model\nsvm_model = SVC(kernel='linear')  \nsvm_model.fit(X_train, y_train)\ny_pred_svm = svm_model.predict(X_test)\naccuracy_svm = accuracy_score(y_test, y_pred_svm)\nprint(\"SVM Accuracy:\", accuracy_svm)\nprecision = precision_score(y_test, y_pred_svm, average='weighted')\nprint(\"Precision:\", precision)\nrecall = recall_score(y_test, y_pred_svm, average='weighted')\nprint(\"Recall:\", recall)\nf1 = f1_score(y_test, y_pred_svm, average='weighted')\nprint(\"F1 Score:\", f1)\nprint()\n#Confusion Matrix\nconf_matrix = confusion_matrix(y_test, y_pred_svm)\nprint(\"Confusion Matrix:\\n\", conf_matrix)\n\nScores['KNN']=accuracy_knn\nScores['SVM']=accuracy_svm","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.459444Z","iopub.status.idle":"2024-03-29T16:14:09.460186Z","shell.execute_reply.started":"2024-03-29T16:14:09.459910Z","shell.execute_reply":"2024-03-29T16:14:09.459943Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Scatter plot for the validation set of KNN\nplt.scatter(range(len(y_pred_knn)), y_pred_knn, color='blue', label='Validation Predictions')\nplt.xlabel('Sample Index')\nplt.ylabel('Predicted Values')\nplt.title('Validation Predictions for KNN')\nplt.legend()\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.461519Z","iopub.status.idle":"2024-03-29T16:14:09.462264Z","shell.execute_reply.started":"2024-03-29T16:14:09.461998Z","shell.execute_reply":"2024-03-29T16:14:09.462021Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Scatter plot for the validation set of SVM\nplt.scatter(range(len(y_pred_svm)), y_pred_svm, color='blue', label='Validation Predictions')\nplt.xlabel('Sample Index')\nplt.ylabel('Predicted Values')\nplt.title('Validation Predictions for SVM')\nplt.legend()\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.463612Z","iopub.status.idle":"2024-03-29T16:14:09.464380Z","shell.execute_reply.started":"2024-03-29T16:14:09.464094Z","shell.execute_reply":"2024-03-29T16:14:09.464117Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**MILESTONE-4**","metadata":{}},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import BaggingClassifier, AdaBoostClassifier\n\nfrom sklearn.metrics import accuracy_score\n\ncart_model = DecisionTreeClassifier(random_state=42)\ncart_model.fit(X_train, y_train)\ny_pred_cart = cart_model.predict(X_test)\naccuracy_cart = accuracy_score(y_test, y_pred_cart)\nprint(\"Accuracy of Decision Tree (CART):\", accuracy_cart)\nprecision = precision_score(y_test, y_pred_cart, average='weighted')\nprint(\"Precision:\", precision)\nrecall = recall_score(y_test, y_pred_cart, average='weighted')\nprint(\"Recall:\", recall)\nf1 = f1_score(y_test, y_pred_cart, average='weighted')\nprint(\"F1 Score:\", f1)\n\nprint()\n#Confusion Matrix\nconf_matrix = confusion_matrix(y_test, y_pred_cart)\nprint(\"Confusion Matrix:\\n\", conf_matrix)\n\nScores['CART(DecisionTreeClassifier)']=accuracy_cart","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.465718Z","iopub.status.idle":"2024-03-29T16:14:09.466493Z","shell.execute_reply.started":"2024-03-29T16:14:09.466206Z","shell.execute_reply":"2024-03-29T16:14:09.466229Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Scatter plot for the validation set\nplt.scatter(range(len(y_pred_cart)), y_pred_cart, color='blue', label='Validation Predictions')\nplt.xlabel('Sample Index')\nplt.ylabel('Predicted Values')\nplt.title('Validation Predictions for CART(Decision Trees)')\nplt.legend()\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.467733Z","iopub.status.idle":"2024-03-29T16:14:09.468101Z","shell.execute_reply.started":"2024-03-29T16:14:09.467917Z","shell.execute_reply":"2024-03-29T16:14:09.467931Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.ensemble import BaggingClassifier\n\nbagging_classifier = BaggingClassifier(base_estimator=lgr, n_estimators=10, random_state=42)\nbagging_classifier.fit(X_train, y_train)\npredictions = bagging_classifier.predict(X_test)\n\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Bagging Accuracy:\", accuracy)\nprecision = precision_score(y_test, predictions, average='weighted')\nprint(\"Precision:\", precision)\nrecall = recall_score(y_test, predictions, average='weighted')\nprint(\"Recall:\", recall)\nf1 = f1_score(y_test, predictions, average='weighted')\nprint(\"F1 Score:\", f1)\n\nprint()\n#Confusion Matrix\nconf_matrix = confusion_matrix(y_test, predictions)\nprint(\"Confusion Matrix:\\n\", conf_matrix)\n\nScores['Bagging Classifier']=accuracy","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.469334Z","iopub.status.idle":"2024-03-29T16:14:09.469673Z","shell.execute_reply.started":"2024-03-29T16:14:09.469509Z","shell.execute_reply":"2024-03-29T16:14:09.469523Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Scatter plot for the validation set\nplt.scatter(range(len(predictions)), predictions, color='blue', label='Validation Predictions')\nplt.xlabel('Sample Index')\nplt.ylabel('Predicted Values')\nplt.title('Validation Predictions for BaggingClassifier')\nplt.legend()\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.470623Z","iopub.status.idle":"2024-03-29T16:14:09.470986Z","shell.execute_reply.started":"2024-03-29T16:14:09.470796Z","shell.execute_reply":"2024-03-29T16:14:09.470810Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.ensemble import GradientBoostingClassifier\n\nboosting_classifier = GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, random_state=42)\nboosting_classifier.fit(X_train, y_train)\npredictions = boosting_classifier.predict(X_test)\n\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Boosting Accuracy:\", accuracy)\nprecision = precision_score(y_test, predictions, average='weighted')\nprint(\"Precision:\", precision)\nrecall = recall_score(y_test, predictions, average='weighted')\nprint(\"Recall:\", recall)\nf1 = f1_score(y_test, predictions, average='weighted')\nprint(\"F1 Score:\", f1)\n\nprint()\n#Confusion Matrix\nconf_matrix = confusion_matrix(y_test, predictions)\nprint(\"Confusion Matrix:\\n\", conf_matrix)\n\nScores['GradientBoostingClassifier']=accuracy","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.472100Z","iopub.status.idle":"2024-03-29T16:14:09.472779Z","shell.execute_reply.started":"2024-03-29T16:14:09.472595Z","shell.execute_reply":"2024-03-29T16:14:09.472612Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Scatter plot for the validation set\nplt.scatter(range(len(predictions)), predictions, color='blue', label='Validation Predictions')\nplt.xlabel('Sample Index')\nplt.ylabel('Predicted Values')\nplt.title('Validation Predictions for GradientBoosting')\nplt.legend()\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.473996Z","iopub.status.idle":"2024-03-29T16:14:09.474568Z","shell.execute_reply.started":"2024-03-29T16:14:09.474380Z","shell.execute_reply":"2024-03-29T16:14:09.474397Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.neural_network import MLPClassifier\nmlp_classifier = MLPClassifier(hidden_layer_sizes=(100, 50), max_iter=500, random_state=42)\nmlp_classifier.fit(X_train, y_train)\npredictions = mlp_classifier.predict(X_test)\n\naccuracy = accuracy_score(y_test, predictions)\nprint(\"MLP Accuracy:\", accuracy)\nprecision = precision_score(y_test, predictions, average='weighted')\nprint(\"Precision:\", precision)\nrecall = recall_score(y_test, predictions, average='weighted')\nprint(\"Recall:\", recall)\nf1 = f1_score(y_test, predictions, average='weighted')\nprint(\"F1 Score:\", f1)\n\nprint()\n#Confusion Matrix\nconf_matrix = confusion_matrix(y_test, predictions)\nprint(\"Confusion Matrix:\\n\", conf_matrix)\n\nScores['MLPClassifier']=accuracy","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.476595Z","iopub.status.idle":"2024-03-29T16:14:09.476935Z","shell.execute_reply.started":"2024-03-29T16:14:09.476771Z","shell.execute_reply":"2024-03-29T16:14:09.476785Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Scatter plot for the validation set\nplt.scatter(range(len(predictions)), predictions, color='blue', label='Validation Predictions')\nplt.xlabel('Sample Index')\nplt.ylabel('Predicted Values')\nplt.title('Validation Predictions for MLP')\nplt.legend()\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.477913Z","iopub.status.idle":"2024-03-29T16:14:09.478692Z","shell.execute_reply.started":"2024-03-29T16:14:09.478448Z","shell.execute_reply":"2024-03-29T16:14:09.478465Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#SCATTER PLOT FOR SCORES\n\nplt.figure(figsize=(12, 6))\nplt.scatter(list(Scores.keys()), list(Scores.values()), label='Scores', marker='o', color='red')\nplt.ylim(0.6, 1.0)\nplt.xlabel('Models')\nplt.ylabel('SCORES')\nplt.title('Scatter Plot of all the ClassificationModels used')\nplt.xticks(rotation=45, ha='right')\nplt.legend()\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.480190Z","iopub.status.idle":"2024-03-29T16:14:09.480544Z","shell.execute_reply.started":"2024-03-29T16:14:09.480379Z","shell.execute_reply":"2024-03-29T16:14:09.480394Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# y_pred_test =svm_model.predict(tfidf_df_test)\n# test_predictions_svm = pd.DataFrame({'ID': test_data['ID'], 'Rating': y_pred_test})\n# test_predictions_svm['Rating'] = test_predictions_svm['Rating'].astype(int)\n# test_predictions_svm['ID'] = test_predictions_svm.index + 1\n# test_predictions_svm.to_csv('submission_svm.csv', index=False)\n# print(\"Submission file 'submission_svm.csv' saved successfully.\")","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.481972Z","iopub.status.idle":"2024-03-29T16:14:09.482353Z","shell.execute_reply.started":"2024-03-29T16:14:09.482157Z","shell.execute_reply":"2024-03-29T16:14:09.482171Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# y_pred_test = xgb_model.predict(tfidf_df_test)\n# test_predictions_xgb = pd.DataFrame({'ID': test_data['ID'], 'Rating': y_pred_test})\n# test_predictions_xgb['Rating'] = test_predictions_xgb['Rating'].astype(int)\n# test_predictions_xgb['ID'] = test_predictions_xgb.index + 1\n# test_predictions_xgb.to_csv('submission_xgb.csv', index=False)\n# print(\"Submission file 'submission_xgb.csv' saved successfully.\")","metadata":{"execution":{"iopub.status.busy":"2024-03-29T16:14:09.483438Z","iopub.status.idle":"2024-03-29T16:14:09.483771Z","shell.execute_reply.started":"2024-03-29T16:14:09.483609Z","shell.execute_reply":"2024-03-29T16:14:09.483623Z"},"trusted":true},"execution_count":null,"outputs":[]}]}