{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":4342,"sourceType":"datasetVersion","datasetId":2607}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/kushagra21f3002930/liver-disease-prediction-in-india?scriptVersionId=178498586\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, mean_absolute_error,r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier,AdaBoostClassifier,BaggingClassifier,GradientBoostingClassifier\nimport xgboost as xgb\n","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:01:18.405227Z","iopub.execute_input":"2024-05-19T08:01:18.405715Z","iopub.status.idle":"2024-05-19T08:01:21.205307Z","shell.execute_reply.started":"2024-05-19T08:01:18.405675Z","shell.execute_reply":"2024-05-19T08:01:21.203899Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df=pd.read_csv('/kaggle/input/indian-liver-patient-records/indian_liver_patient.csv')","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:01:21.207368Z","iopub.execute_input":"2024-05-19T08:01:21.207985Z","iopub.status.idle":"2024-05-19T08:01:21.241582Z","shell.execute_reply.started":"2024-05-19T08:01:21.20795Z","shell.execute_reply":"2024-05-19T08:01:21.240584Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:01:21.243495Z","iopub.execute_input":"2024-05-19T08:01:21.244393Z","iopub.status.idle":"2024-05-19T08:01:21.286492Z","shell.execute_reply.started":"2024-05-19T08:01:21.244359Z","shell.execute_reply":"2024-05-19T08:01:21.284621Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:01:21.290326Z","iopub.execute_input":"2024-05-19T08:01:21.291025Z","iopub.status.idle":"2024-05-19T08:01:21.329396Z","shell.execute_reply.started":"2024-05-19T08:01:21.290975Z","shell.execute_reply":"2024-05-19T08:01:21.327659Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe().transpose()","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:01:21.330976Z","iopub.execute_input":"2024-05-19T08:01:21.331333Z","iopub.status.idle":"2024-05-19T08:01:21.385359Z","shell.execute_reply.started":"2024-05-19T08:01:21.331303Z","shell.execute_reply":"2024-05-19T08:01:21.384526Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**HANDLING NULL VALUES**","metadata":{}},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:01:21.386705Z","iopub.execute_input":"2024-05-19T08:01:21.38787Z","iopub.status.idle":"2024-05-19T08:01:21.399518Z","shell.execute_reply.started":"2024-05-19T08:01:21.387825Z","shell.execute_reply":"2024-05-19T08:01:21.397334Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df=df.fillna(method='bfill')\ndf.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:01:21.402091Z","iopub.execute_input":"2024-05-19T08:01:21.402514Z","iopub.status.idle":"2024-05-19T08:01:21.419073Z","shell.execute_reply.started":"2024-05-19T08:01:21.402485Z","shell.execute_reply":"2024-05-19T08:01:21.417782Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**DROPPING DUPLICATES**","metadata":{}},{"cell_type":"code","source":"df=df.drop_duplicates()\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:01:21.420887Z","iopub.execute_input":"2024-05-19T08:01:21.421279Z","iopub.status.idle":"2024-05-19T08:01:21.440332Z","shell.execute_reply.started":"2024-05-19T08:01:21.421248Z","shell.execute_reply":"2024-05-19T08:01:21.438779Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['Gender'].value_counts().plot.bar(color='peachpuff')","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:01:21.442124Z","iopub.execute_input":"2024-05-19T08:01:21.44252Z","iopub.status.idle":"2024-05-19T08:01:21.737425Z","shell.execute_reply.started":"2024-05-19T08:01:21.442487Z","shell.execute_reply":"2024-05-19T08:01:21.73583Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\ndf.hist(figsize=(15,15), xrot=-45,bins=10)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:01:21.74204Z","iopub.execute_input":"2024-05-19T08:01:21.743618Z","iopub.status.idle":"2024-05-19T08:01:24.089752Z","shell.execute_reply.started":"2024-05-19T08:01:21.743567Z","shell.execute_reply":"2024-05-19T08:01:24.088706Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['Gender']=df['Gender'].apply(lambda x:1 if x=='Male' else 0)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:01:24.090795Z","iopub.execute_input":"2024-05-19T08:01:24.091124Z","iopub.status.idle":"2024-05-19T08:01:24.098594Z","shell.execute_reply.started":"2024-05-19T08:01:24.091096Z","shell.execute_reply":"2024-05-19T08:01:24.097529Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:01:24.10022Z","iopub.execute_input":"2024-05-19T08:01:24.100672Z","iopub.status.idle":"2024-05-19T08:01:24.129284Z","shell.execute_reply.started":"2024-05-19T08:01:24.100641Z","shell.execute_reply":"2024-05-19T08:01:24.127887Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Converting Dataset values from 2 to 0 and 1 to 1:**\n* (0 for no disease & 1 for liver disease)\n\n","metadata":{}},{"cell_type":"code","source":"df['Dataset'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:01:24.131343Z","iopub.execute_input":"2024-05-19T08:01:24.131832Z","iopub.status.idle":"2024-05-19T08:01:24.142846Z","shell.execute_reply.started":"2024-05-19T08:01:24.131792Z","shell.execute_reply":"2024-05-19T08:01:24.141615Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['Dataset'] = df['Dataset'].map({2:0,1:1})\ndf","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:01:24.144307Z","iopub.execute_input":"2024-05-19T08:01:24.144704Z","iopub.status.idle":"2024-05-19T08:01:24.172933Z","shell.execute_reply.started":"2024-05-19T08:01:24.144673Z","shell.execute_reply":"2024-05-19T08:01:24.171484Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"corr=df.corr()\nplt.figure(figsize=(20,10))\nsns.heatmap(corr,cmap=\"Blues\",annot=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:01:24.174733Z","iopub.execute_input":"2024-05-19T08:01:24.175298Z","iopub.status.idle":"2024-05-19T08:01:25.185278Z","shell.execute_reply.started":"2024-05-19T08:01:24.175263Z","shell.execute_reply":"2024-05-19T08:01:25.184029Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Min-Max Scaling**","metadata":{}},{"cell_type":"code","source":"for x in df.columns:\n    df[x]=(df[x]-df[x].min())/(df[x].max()-df[x].min())\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:01:25.186774Z","iopub.execute_input":"2024-05-19T08:01:25.187616Z","iopub.status.idle":"2024-05-19T08:01:25.218886Z","shell.execute_reply.started":"2024-05-19T08:01:25.187576Z","shell.execute_reply":"2024-05-19T08:01:25.21762Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\n# Separating the data into three categories: with liver disease, no disease, and total\nwith_disease = df[df['Dataset'] == 1]\nno_disease = df[df['Dataset'] == 0]\ntotal = df\n\n# Function to calculate max, min, and median values\ndef calculate_statistics(df):\n    return df.max(), df.min(), df.median()\n\n# Calculate the statistics for each category\nmax_with_disease, min_with_disease, median_with_disease = calculate_statistics(with_disease)\nmax_no_disease, min_no_disease, median_no_disease = calculate_statistics(no_disease)\nmax_total, min_total, median_total = calculate_statistics(total)\n\n# Compile results into dictionaries\nmax_values = {\n    'With Liver Disease': max_with_disease,\n    'No Disease': max_no_disease,\n    'Total': max_total\n}\nmin_values = {\n    'With Liver Disease': min_with_disease,\n    'No Disease': min_no_disease,\n    'Total': min_total\n}\nmedian_values = {\n    'With Liver Disease': median_with_disease,\n    'No Disease': median_no_disease,\n    'Total': median_total\n}\n\n# Create DataFrames to display the results\nmax_df = pd.DataFrame(max_values).transpose()\nmin_df = pd.DataFrame(min_values).transpose()\nmedian_df = pd.DataFrame(median_values).transpose()\n\n# Display the results\nprint(\"Maximum Values:\")\nprint(max_df)\n\nprint(\"\\n\\nMinimum Values:\")\nprint(min_df)\n\nprint(\"\\n\\nMedian Values:\")\nprint(median_df)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:01:25.220511Z","iopub.execute_input":"2024-05-19T08:01:25.220858Z","iopub.status.idle":"2024-05-19T08:01:25.267271Z","shell.execute_reply.started":"2024-05-19T08:01:25.220831Z","shell.execute_reply":"2024-05-19T08:01:25.26601Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['Gender'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:27:26.712527Z","iopub.execute_input":"2024-05-19T08:27:26.713Z","iopub.status.idle":"2024-05-19T08:27:26.723186Z","shell.execute_reply.started":"2024-05-19T08:27:26.712965Z","shell.execute_reply":"2024-05-19T08:27:26.722026Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# *Insights*\n\n1. **Total_Bilirubin and Direct_Bilirubin**:\n   - These values are significantly higher in the \"With Liver Disease\" group compared to the \"No Disease\" group. Elevated bilirubin levels are a strong indicator of liver dysfunction.\n\n2. **Alkaline_Phosphotase (ALP)**:\n   - The maximum and median values for ALP are higher in individuals with liver disease. ALP is an enzyme related to the bile ducts, often increased when they are blocked or inflamed.\n\n3. **Alamine_Aminotransferase (ALT)** and **Aspartate_Aminotransferase (AST)**:\n   - Both enzymes are higher in the liver disease group. These are liver enzymes, and their elevated levels can indicate liver damage.\n\n4. **Albumin and Albumin_and_Globulin_Ratio**:\n   - Albumin levels and the Albumin-to-Globulin ratio are also different between the groups. Albumin is a protein made by the liver, and its levels can drop with liver disease.\n\n5. **Total_Protiens**:\n   - The minimum and median values differ between the groups. Total protein levels can give insights into overall liver function.\n\n### Important Features\nConsidering the statistical differences and their clinical relevance to liver function, the most important features in determining liver disease are likely:\n\n1. **Total_Bilirubin**\n2. **Direct_Bilirubin**\n3. **Alkaline_Phosphotase (ALP)**\n4. **Alamine_Aminotransferase (ALT)**\n5. **Aspartate_Aminotransferase (AST)**\n6. **Albumin**\n7. **Albumin_and_Globulin_Ratio**\n8. **Total_Protiens**\n\n### Rationale\n- **Total_Bilirubin and Direct_Bilirubin** are direct indicators of liver processing ability.\n- **ALP, ALT, and AST** are enzymes that, when elevated, indicate liver cell injury or bile duct issues.\n- **Albumin and Albumin_and_Globulin_Ratio** reflect the liver's ability to produce proteins, which is essential for maintaining various body functions.\n- **Total_Protiens** provide a broad measure of the liver's synthetic function.\n","metadata":{}},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:16:55.882255Z","iopub.execute_input":"2024-05-19T08:16:55.883517Z","iopub.status.idle":"2024-05-19T08:16:55.89459Z","shell.execute_reply.started":"2024-05-19T08:16:55.883463Z","shell.execute_reply":"2024-05-19T08:16:55.893576Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom xgboost import XGBClassifier\n\n# Define features and target variable\nX = df.drop(['Dataset', 'Age', 'Gender'], axis=1)\ny = df['Dataset']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=42)\n\n# Standardize features\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Initialize and test multiple machine learning algorithms\nclassifiers = {\n    'Logitic Regression':LogisticRegression(),\n    'Decision Tree':DecisionTreeClassifier(),\n    'Gradient Boosting': GradientBoostingClassifier(),\n    'Random Forest':RandomForestClassifier(class_weight='balanced',random_state=42),\n    'Support Vector Machine': SVC(),\n    'Gaussian Naive Bayes': GaussianNB(),\n    'K-Nearest Neighbors': KNeighborsClassifier(),\n    'Neural Network': MLPClassifier(hidden_layer_sizes=(100, 100), max_iter=1000),\n}\n\nfor name, clf in classifiers.items():\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    \n    accuracy = accuracy_score(y_test, y_pred)\n    report = classification_report(y_test, y_pred)\n    \n    print(f\"Algorithm: {name}\")\n    print(f\"Accuracy: {accuracy:.2f}\")\n    print(report)\n    print(\"=\"*50)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:35:58.633649Z","iopub.execute_input":"2024-05-19T08:35:58.634048Z","iopub.status.idle":"2024-05-19T08:36:04.356538Z","shell.execute_reply.started":"2024-05-19T08:35:58.634018Z","shell.execute_reply":"2024-05-19T08:36:04.354931Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\nfrom imblearn.over_sampling import SMOTE\n\n# Split data into features and target\nX = df.drop('Dataset', axis=1)\ny = df['Dataset']\n\n# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Apply SMOTE to the training data\nsmote = SMOTE(random_state=42)\nX_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)\n\n# Train a model\nmodel_lr = LogisticRegression(random_state=42)\nmodel_lr.fit(X_train_resampled, y_train_resampled)\nmodel_rf = RandomForestClassifier(random_state=42)\nmodel_rf.fit(X_train_resampled, y_train_resampled)\n\n# Make predictions\ny_pred_lr = model_lr.predict(X_test)\nprint(classification_report(y_test, y_pred_lr))\ny_pred_rf = model_rf.predict(X_test)\nprint(classification_report(y_test, y_pred_rf))\n","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:34:54.416972Z","iopub.execute_input":"2024-05-19T08:34:54.417426Z","iopub.status.idle":"2024-05-19T08:34:54.819187Z","shell.execute_reply.started":"2024-05-19T08:34:54.417394Z","shell.execute_reply":"2024-05-19T08:34:54.817752Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_male=df[df[\"Gender\"]==1]","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:01:25.269018Z","iopub.execute_input":"2024-05-19T08:01:25.269437Z","iopub.status.idle":"2024-05-19T08:01:25.276338Z","shell.execute_reply.started":"2024-05-19T08:01:25.269405Z","shell.execute_reply":"2024-05-19T08:01:25.27528Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_male","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:01:25.289305Z","iopub.execute_input":"2024-05-19T08:01:25.290283Z","iopub.status.idle":"2024-05-19T08:01:25.319062Z","shell.execute_reply.started":"2024-05-19T08:01:25.290244Z","shell.execute_reply":"2024-05-19T08:01:25.31782Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_male.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:21:50.3338Z","iopub.execute_input":"2024-05-19T08:21:50.33432Z","iopub.status.idle":"2024-05-19T08:21:50.347108Z","shell.execute_reply.started":"2024-05-19T08:21:50.334278Z","shell.execute_reply":"2024-05-19T08:21:50.345701Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom xgboost import XGBClassifier\n\n# Define features and target variable\nX = df_male.drop(['Dataset', 'Age', 'Gender'], axis=1)\ny = df_male['Dataset']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=42)\n\n# Standardize features\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Initialize and test multiple machine learning algorithms\nclassifiers = {\n    'Logitic Regression':LogisticRegression(),\n    'Decision Tree':DecisionTreeClassifier(),\n    'Gradient Boosting': GradientBoostingClassifier(),\n    'Random Forest':RandomForestClassifier(),\n    'Support Vector Machine': SVC(),\n    'Gaussian Naive Bayes': GaussianNB(),\n    'K-Nearest Neighbors': KNeighborsClassifier(),\n    'Neural Network': MLPClassifier(hidden_layer_sizes=(100, 100), max_iter=1000),\n}\n\nfor name, clf in classifiers.items():\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    \n    accuracy = accuracy_score(y_test, y_pred)\n    report = classification_report(y_test, y_pred)\n    \n    print(f\"Algorithm: {name}\")\n    print(f\"Accuracy: {accuracy:.2f}\")\n    print(report)\n    print(\"=\"*50)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:24:56.138223Z","iopub.execute_input":"2024-05-19T08:24:56.138714Z","iopub.status.idle":"2024-05-19T08:25:02.848155Z","shell.execute_reply.started":"2024-05-19T08:24:56.138669Z","shell.execute_reply":"2024-05-19T08:25:02.847045Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_female=df[df[\"Gender\"]==0]","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:22:51.240159Z","iopub.execute_input":"2024-05-19T08:22:51.240708Z","iopub.status.idle":"2024-05-19T08:22:51.246952Z","shell.execute_reply.started":"2024-05-19T08:22:51.240676Z","shell.execute_reply":"2024-05-19T08:22:51.245855Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df_female","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:22:52.246863Z","iopub.execute_input":"2024-05-19T08:22:52.247952Z","iopub.status.idle":"2024-05-19T08:22:52.274812Z","shell.execute_reply.started":"2024-05-19T08:22:52.247889Z","shell.execute_reply":"2024-05-19T08:22:52.273782Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom xgboost import XGBClassifier\n\n# Define features and target variable\nX = df_female.drop(['Dataset', 'Age', 'Gender'], axis=1)\ny = df_female['Dataset']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# Standardize features\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Initialize and test multiple machine learning algorithms\nclassifiers = {\n    'Logitic Regression':LogisticRegression(),\n    'Decision Tree':DecisionTreeClassifier(),\n    'Gradient Boosting': GradientBoostingClassifier(),\n    'Random Forest':RandomForestClassifier(),\n    'Support Vector Machine': SVC(),\n    'Gaussian Naive Bayes': GaussianNB(),\n    'K-Nearest Neighbors': KNeighborsClassifier(),\n    'Neural Network': MLPClassifier(hidden_layer_sizes=(100, 100), max_iter=1000),\n}\n\nfor name, clf in classifiers.items():\n    clf.fit(X_train, y_train)\n    y_pred = clf.predict(X_test)\n    \n    accuracy = accuracy_score(y_test, y_pred)\n    report = classification_report(y_test, y_pred)\n    \n    print(f\"Algorithm: {name}\")\n    print(f\"Accuracy: {accuracy:.2f}\")\n    print(report)\n    print(\"=\"*50)","metadata":{"execution":{"iopub.status.busy":"2024-05-19T08:25:10.358756Z","iopub.execute_input":"2024-05-19T08:25:10.359223Z","iopub.status.idle":"2024-05-19T08:25:12.411034Z","shell.execute_reply.started":"2024-05-19T08:25:10.359181Z","shell.execute_reply":"2024-05-19T08:25:12.409405Z"},"trusted":true},"execution_count":null,"outputs":[]}]}